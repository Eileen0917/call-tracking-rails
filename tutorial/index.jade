.chapter(data-title='Call Tracking with Twilio and Ruby on Rails')
  .step(data-file='app/assets/javascripts/call_tracking.js')
    :markdown
      ## What does this thing do?

      This [Ruby on Rails](http://rubyonrails.org/) web application shows how you can
      use Twilio to track the effectiveness of different marketing channels.

      ![Call tracking home page](http://howtodocs.s3.amazonaws.com/call-tracking-home.png)

      This application has three main features:

      - It purchases phone numbers from Twilio to use in different marketing
      campaigns (like a billboard or a bus advertisement)
      - It forwards incoming calls for those phone numbers to a salesperson
      - It displays charts showing data about the phone numbers and the calls
      they receive

      In this tutorial, we'll point out the key bits of code that make this
      application work.
      [Check out the project README on
      GitHub](https://github.com/twiliodeved/call-tracking-rails)
      to see how to run the code yourself.

      Let's get started! Click the right arrow above to advance to the next
      code snippet.

      ---

      **See also:**

      * [Twilio Ruby Helper Library](https://github.com/twilio/twilio-ruby)
      * [Twilio REST API docs](https://www.twilio.com/docs/api)
      * [Rails Docs](http://rubyonrails.org/documentation/)
      * [What is Call Tracking?](http://www.searchenginejournal.com/seo-beginner-guide-call-tracking-care/83173/)

  .step(data-file='lib/twilio_client.rb', data-highlight='1-21')
    :markdown
      ## Search for available phone numbers

      Call tracking requires us to search for and buy phone numbers on demand,
      associating a specific phone number with a lead source. This utility module
      uses the [twilio-ruby helper
      library](http://twilio-ruby.readthedocs.org/en/latest/usage/basics.html)
      to search for phone numbers by area code and return a list of numbers
      that are available for purchase.

      ---

      **See also:**

      * [twilio-ruby helper library
      basics](http://twilio-ruby.readthedocs.org/en/latest/usage/basics.html)
      * [Searching for and buying numbers in
      twilio-ruby](http://twilio-ruby.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [Twilio REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='app/controllers/available_phone_numbers_controller.rb',
  data-highlight='1-7')
    :markdown
      ## Display available phone numbers

      We display a form to the user on the app's home page which allows them to
      search for a new phone number by area code. At controller level we use the
      `TwilioClient` we created earlier to actually search for numbers. This
      will render the view that contains a list of numbers they can choose to buy.

      ---

      **See also:**

      * [Action Controller
      Overview](http://guides.rubyonrails.org/action_controller_overview.html)

  .step(data-file='lib/twilio_client.rb', data-highlight='23-27')
    :markdown
      ## Buy a phone number

      Our `purchase_phone_number` method takes a phone number as its
      sole parameter and uses our Twilio API client to purchase the
      available phone number our user chooses.

      ---

      **See also:**

      * [Searching for and buying numbers in
      twilio-ruby](http://twilio-ruby.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [Twilio REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='lib/twilio_client.rb', data-highlight='23-27')
    :markdown
      ## Set webhook URLs in a TwiML Application

      When we purchase a phone number, we specify a voice application SID. This is
      an identifier for a [TwiML application](https://www.twilio.com/help/faq/twilio-client/how-do-i-create-a-twiml-app),
      which you can create through the [REST API](https://www.twilio.com/docs/api/rest/applications)
      or [account portal](https://www.twilio.com/user/account/apps).

      ![Creating a TwiML app](http://howtodocs.s3.amazonaws.com/call-tracking-twiml-app.gif)

  .step(data-file='app/controllers/lead_sources_controller.rb',
  data-highlight='7-14')
    :markdown
      ## Associate a phone number with a lead source

      Once we search for and buy a Twilio number, we need to associate it with a
      lead source in our database. This is the core of a call tracking application.
      Any phone calls to our new Twilio number will be attributed to this source.

      ---

      **See also:**

      * [Rails Flash
      Messages](http://guides.rubyonrails.org/action_controller_overview.html#the-flash)
      * [Rails
      Redirecting](http://api.rubyonrails.org/classes/ActionController/Redirecting.html)

  .step(data-file='app/models/lead_source.rb', data-highlight='1-11')
    :markdown
      ## The LeadSource model

      The `LeadSource` model associates a Twilio number to a named lead source
      (like "Wall Street Journal Ad" or "Dancing guy with sign"). It also tracks
      a phone number to which we'd like all the calls redirected, like your sales
      or support help line.

      ---

      **See also:**

      * [Active Record
      Basics](http://guides.rubyonrails.org/active_record_basics.html)
      * [Active Record
      Associations](http://guides.rubyonrails.org/association_basics.html)
      * [Active Record Query
      Interface](http://guides.rubyonrails.org/active_record_querying.html)

  .step(data-file='app/models/lead.rb', data-highlight='1-11')
    :markdown
      ## The Lead model

      A `Lead` represents a phone call generated by a `LeadSource`. Each time
      somebody calls a phone number associated with a `LeadSource`, we'll use the `Lead` model to
      record some of the [data Twilio gives us](https://www.twilio.com/docs/api/twiml/twilio_request) 
      about their call.

      ---

      **See also:**

      * [Active Record
      Basics](http://guides.rubyonrails.org/active_record_basics.html)
      * [Active Record
      Associations](http://guides.rubyonrails.org/association_basics.html)
      * [Active Record Query
      Interface](http://guides.rubyonrails.org/active_record_querying.html)

  .step(data-file='app/controllers/call_tracking_controller.rb')
    :markdown
      ## Forward calls and create leads

      Whenever a customer calls one of our Twilio numbers, Twilio will send a POST 
      request to the URL associated with this action (should be
      `/call-tracking/forward-call`).

      We use the incoming call data to create a new `Lead` for a `LeadSource`,
      then return [TwiML](https://www.twilio.com/docs/api/twiml) that connects our caller
      with the `forwarding_number` of our `LeadSource`.

      ---

      **See also:**

      * [Twilio voice request parameters](https://www.twilio.com/docs/api/twiml/twilio_request)
      * [skip_before_action](http://apidock.com/rails/v4.0.2/AbstractController/Callbacks/ClassMethods/skip_before_action)
      * [ActionController::RequestForgeryProtection](http://api.rubyonrails.org/classes/ActionController/RequestForgeryProtection.html)
      * [TwiML creation with
      twilio-ruby](https://twilio-ruby.readthedocs.org/en/latest/usage/twiml.html)
      * [TwiML <Dial> verb](https://www.twilio.com/docs/api/twiml/dial)

  .step(data-file='app/models/lead_source.rb', data-highlight='4-6')
    :markdown
      ## Get statistics about our lead sources

      One useful statistic we can get from our data is how many calls each
      `LeadSource` has received. We use the Active Record Query Interface to make a list containing each
      `LeadSource` and a count of its `Lead` models.

      ---

      **See also:**

      * [Active Record Query
      Interface](http://guides.rubyonrails.org/active_record_querying.html)

  .step(data-file='app/assets/javascripts/call_tracking.js')
    :markdown
      ## Visualize our statistics with Chart.js

      Back on the home page, we fetch call tracking statistics 
      [in JSON from the server](https://docs.djangoproject.com/en/1.8/ref/request-response/#jsonresponse-objects) 
      using [jQuery](https://api.jquery.com/jquery.get/).
      We display the stats in colorful pie charts we create with [Chart.js](http://www.chartjs.org/). 

      ![Call tracking charts](http://howtodocs.s3.amazonaws.com/call-tracking-charts.png)

      ---

      **See also:**

      * [Chart.js](http://www.chartjs.org/)

  .step(data-file='app/assets/javascripts/call_tracking.js')
    :markdown
      ## Where to next?

      That's it! Our Ruby on Rails application is now ready to purchase new phone
      numbers, forward incoming calls, and record some statistics for our
      business.

      If you're a Ruby on Rails developer working with Twilio, you might also enjoy these
      tutorials:

      [**Click-To-Call
      (Rails)**](https://www.twilio.com/docs/howto/walkthrough/click-to-call/ruby/rails)

      Put a button on your web page that connects visitors to live support or sales people via telephone.

      [**IVR Phone Tree
      (Rails)**](https://www.twilio.com/docs/howto/walkthrough/ivr-phone-tree/ruby/rails)

      Connect your callers to an IVR (interactive voice response), allowing them
      to make selections about how their call should be routed.

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet [@twilio](https://twitter.com/twilio)
      to let us know what you think.
